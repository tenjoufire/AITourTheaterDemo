@page "/order-history"
@page "/注文履歴"
@inject IOrderService OrderService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>注文履歴 - GiftPalette</PageTitle>

<div class="container my-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="display-6">📋 注文履歴</h1>
        <p class="text-muted">これまでのご注文を確認できます</p>
    </div>

    @if (loading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">注文履歴を読み込み中...</span>
            </div>
            <p class="mt-3 text-muted">注文履歴を読み込み中...</p>
        </div>
    }
    else if (orders.Count == 0)
    {
        <div class="text-center py-5">
            <div class="display-1 text-muted">📦</div>
            <h3 class="mt-3">注文履歴がありません</h3>
            <p class="text-muted mb-4">まだご注文いただいた商品がございません。<br/>素敵な商品を見つけに行きましょう！</p>
            <button class="btn btn-primary btn-lg" @onclick="GoToProducts">
                商品一覧を見る
            </button>
        </div>
    }
    else
    {
        @foreach (var order in orders)
        {
            <div class="card mb-4">
                <div class="card-header bg-light">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <h5 class="mb-1">注文番号: @order.OrderNumber</h5>
                            <small class="text-muted">@order.CreatedAt.ToString("yyyy年MM月dd日 HH:mm")</small>
                        </div>
                        <div class="col-md-3">
                            <span class="badge 
                                @(order.Status == OrderStatus.Delivered ? "bg-success" : 
                                  order.Status == OrderStatus.Shipped ? "bg-info" : 
                                  order.Status == OrderStatus.Processing ? "bg-warning" : 
                                  order.Status == OrderStatus.Pending ? "bg-secondary" : "bg-danger") fs-6">
                                @GetStatusText(order.Status)
                            </span>
                        </div>
                        <div class="col-md-3 text-end">
                            <h5 class="text-primary mb-0">¥@order.TotalAmount.ToString("N0")</h5>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <strong>お届け先:</strong> @order.CustomerName<br/>
                            <small class="text-muted">@order.ShippingAddress</small>
                        </div>
                        <div class="col-md-6">
                            <strong>メールアドレス:</strong> @order.CustomerEmail
                        </div>
                    </div>
                    
                    <h6 class="mb-3">注文商品</h6>
                    @foreach (var item in order.Items)
                    {
                        <div class="row align-items-center mb-2 p-2 bg-light rounded">
                            <div class="col-md-2 col-sm-3">
                                <img src="@item.ImageUrl" alt="@item.ProductName" 
                                     class="img-fluid rounded" style="height: 60px; object-fit: contain;">
                            </div>
                            <div class="col-md-4 col-sm-9">
                                <h6 class="mb-1">@item.ProductName</h6>
                                <small class="text-primary">¥@item.Price.ToString("N0")</small>
                            </div>
                            <div class="col-md-3 col-sm-6">
                                <span class="fw-bold">@item.Quantity 個</span>
                            </div>
                            <div class="col-md-3 col-sm-4 text-end">
                                <span class="fw-bold text-success">¥@((item.Price * item.Quantity).ToString("N0"))</span>
                            </div>
                        </div>
                    }
                    
                    <div class="d-flex gap-2 mt-3">
                        @if (order.Status == OrderStatus.Delivered)
                        {
                            <button class="btn btn-outline-secondary btn-sm">
                                📝 レビューを書く
                            </button>
                        }
                        @if (order.Status == OrderStatus.Pending || order.Status == OrderStatus.Processing)
                        {
                            <button class="btn btn-outline-info btn-sm">
                                📞 お問い合わせ
                            </button>
                        }
                        <button class="btn btn-primary btn-sm" @onclick="@(() => ReorderItems(order))">
                            🔄 再注文
                        </button>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private List<Order> orders = new();
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrderHistory();
    }

    private async Task LoadOrderHistory()
    {
        loading = true;
        orders = await OrderService.GetOrderHistoryAsync();
        loading = false;
    }

    private string GetStatusText(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "注文受付中",
            OrderStatus.Processing => "処理中",
            OrderStatus.Shipped => "発送済み",
            OrderStatus.Delivered => "配達完了",
            OrderStatus.Cancelled => "キャンセル",
            _ => "不明"
        };
    }

    private void GoToProducts()
    {
        Navigation.NavigateTo("/products");
    }

    private void ReorderItems(Order order)
    {
        // In a real app, you would add items to cart and navigate
        Navigation.NavigateTo("/products");
    }
}

