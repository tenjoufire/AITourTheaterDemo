@page "/order-history"
@page "/注文履歴"
@inject IOrderService OrderService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>注文履歴 - GiftPalette</PageTitle>

<div class="history-container">
    <div class="page-header">
        <h1 class="page-title">📋 注文履歴</h1>
        <p class="page-subtitle">これまでのご注文を確認できます</p>
    </div>

    @if (loading)
    {
        <div class="loading">
            <div class="loading-spinner"></div>
            <p>注文履歴を読み込み中...</p>
        </div>
    }
    else if (orders.Count == 0)
    {
        <div class="empty-state">
            <div class="empty-icon">📦</div>
            <h3>注文履歴がありません</h3>
            <p>まだご注文いただいた商品がございません。<br/>素敵な商品を見つけに行きましょう！</p>
            <button class="btn btn-primary" @onclick="GoToProducts">
                商品一覧を見る
            </button>
        </div>
    }
    else
    {
        <div class="orders-list">
            @foreach (var order in orders)
            {
                <div class="order-card">
                    <div class="order-header">
                        <div class="order-info">
                            <h3 class="order-number">注文番号: @order.OrderNumber</h3>
                            <div class="order-meta">
                                <span class="order-date">@order.CreatedAt.ToString("yyyy年MM月dd日")</span>
                                <span class="order-status status-@order.Status.ToString().ToLower()">
                                    @GetStatusText(order.Status)
                                </span>
                            </div>
                        </div>
                        <div class="order-total">
                            ¥@order.TotalAmount.ToString("N0")
                        </div>
                    </div>

                    <div class="order-details">
                        <div class="customer-info">
                            <div class="info-item">
                                <span class="label">お届け先:</span>
                                <span class="value">@order.CustomerName</span>
                            </div>
                            <div class="info-item">
                                <span class="label">住所:</span>
                                <span class="value">@order.ShippingAddress</span>
                            </div>
                        </div>

                        <div class="order-items">
                            <h4>注文商品</h4>
                            @foreach (var item in order.Items)
                            {
                                <div class="order-item">
                                    <div class="item-image">
                                        <img src="@item.ImageUrl" alt="@item.ProductName" />
                                    </div>
                                    <div class="item-details">
                                        <div class="item-name">@item.ProductName</div>
                                        <div class="item-info">
                                            ¥@item.Price.ToString("N0") × @(item.Quantity)個 = ¥@((item.Price * item.Quantity).ToString("N0"))
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="order-actions">
                        @if (order.Status == OrderStatus.Delivered)
                        {
                            <button class="btn btn-secondary">
                                📝 レビューを書く
                            </button>
                        }
                        @if (order.Status == OrderStatus.Pending || order.Status == OrderStatus.Processing)
                        {
                            <button class="btn btn-outline">
                                📞 お問い合わせ
                            </button>
                        }
                        <button class="btn btn-primary" @onclick="@(() => ReorderItems(order))">
                            🔄 再注文
                        </button>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<Order> orders = new();
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrderHistory();
    }

    private async Task LoadOrderHistory()
    {
        loading = true;
        orders = await OrderService.GetOrderHistoryAsync();
        loading = false;
    }

    private string GetStatusText(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "注文受付中",
            OrderStatus.Processing => "処理中",
            OrderStatus.Shipped => "発送済み",
            OrderStatus.Delivered => "配達完了",
            OrderStatus.Cancelled => "キャンセル",
            _ => "不明"
        };
    }

    private void GoToProducts()
    {
        Navigation.NavigateTo("/products");
    }

    private void ReorderItems(Order order)
    {
        // In a real app, you would add items to cart and navigate
        Navigation.NavigateTo("/products");
    }
}

