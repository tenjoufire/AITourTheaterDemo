@page "/cart"
@page "/カート"
@inject ICartService CartService
@inject IOrderService OrderService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>ショッピングカート - GiftPalette</PageTitle>

<div class="container my-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="display-6">🛒 ショッピングカート</h1>
    </div>

    @if (loading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">カートを読み込み中...</span>
            </div>
            <p class="mt-3 text-muted">カートを読み込み中...</p>
        </div>
    }
    else if (currentCart.Items.Count == 0)
    {
        <div class="text-center py-5">
            <div class="display-1 text-muted">🛒</div>
            <h3 class="mt-3">カートは空です</h3>
            <p class="text-muted mb-4">素敵な商品を見つけに行きましょう！</p>
            <button class="btn btn-primary btn-lg" @onclick="GoToProducts">
                商品一覧を見る
            </button>
        </div>
    }
    else
    {
        <div class="row">
            <!-- カートアイテム -->
            <div class="col-md-8">
                <div class="row">
                    @foreach (var item in currentCart.Items)
                    {
                        <div class="col-12 mb-3">
                            <div class="card h-100">
                                <div class="card-body">
                                    <div class="row align-items-center">
                                        <div class="col-md-2 col-sm-3">
                                            <img src="@item.ImageUrl" alt="@item.ProductName" 
                                                 class="img-fluid rounded" style="height: 80px; object-fit: contain;">
                                        </div>
                                        <div class="col-md-4 col-sm-9">
                                            <h5 class="card-title mb-1">@item.ProductName</h5>
                                            <p class="text-primary fw-bold mb-0">¥@item.Price.ToString("N0")</p>
                                        </div>
                                        <div class="col-md-3 col-sm-6">
                                            <div class="d-flex align-items-center justify-content-center">
                                                <button class="btn btn-outline-secondary btn-sm" 
                                                        @onclick="@(() => UpdateQuantity(item.ProductId, item.Quantity - 1))" 
                                                        disabled="@isUpdating">
                                                    −
                                                </button>
                                                <span class="mx-3 fw-bold">@item.Quantity</span>
                                                <button class="btn btn-outline-secondary btn-sm" 
                                                        @onclick="@(() => UpdateQuantity(item.ProductId, item.Quantity + 1))" 
                                                        disabled="@isUpdating">
                                                    +
                                                </button>
                                            </div>
                                        </div>
                                        <div class="col-md-2 col-sm-4">
                                            <div class="text-center">
                                                <div class="fw-bold text-success mb-2">
                                                    ¥@((item.Price * item.Quantity).ToString("N0"))
                                                </div>
                                                <button class="btn btn-outline-danger btn-sm" 
                                                        @onclick="@(() => RemoveItem(item.ProductId))" 
                                                        disabled="@isUpdating"
                                                        title="削除">
                                                    🗑️
                                                </button>
                                            </div>
                                        </div>
                                        <div class="col-md-1 col-sm-2">
                                            
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- 注文サマリー -->
            <div class="col-md-4" style="z-index: 1000;">
                <div class="card sticky-top" style="top: 2rem;">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">注文サマリー</h4>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between mb-2">
                            <span>商品数：</span>
                            <span class="fw-bold">@currentCart.TotalItems 個</span>
                        </div>
                        <hr>
                        <div class="d-flex justify-content-between mb-3">
                            <span class="h5">合計金額：</span>
                            <span class="h5 text-primary fw-bold">¥@currentCart.TotalAmount.ToString("N0")</span>
                        </div>
                        
                        @if (showCheckout)
                        {
                            <div class="checkout-form">
                                <h5 class="mb-3">お客様情報</h5>
                                <div class="mb-3">
                                    <label class="form-label">お名前：</label>
                                    <input type="text" @bind="customerName" class="form-control" placeholder="田中 花子" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">メールアドレス：</label>
                                    <input type="email" @bind="customerEmail" class="form-control" placeholder="hanako@example.com" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">お届け先住所：</label>
                                    <textarea @bind="shippingAddress" class="form-control" rows="3" 
                                              placeholder="〒123-4567&#10;東京都渋谷区..."></textarea>
                                </div>
                                <div class="d-grid gap-2">
                                    <button class="btn btn-primary" @onclick="CompleteOrder" 
                                            disabled="@(isProcessing || !IsFormValid())">
                                        @if (isProcessing)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            <span>処理中...</span>
                                        }
                                        else
                                        {
                                            <span>注文を確定する</span>
                                        }
                                    </button>
                                    <button class="btn btn-outline-secondary" @onclick="CancelCheckout">
                                        キャンセル
                                    </button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="d-grid gap-2">
                                <button class="btn btn-success btn-lg" @onclick="StartCheckout">
                                    レジに進む
                                </button>
                                <button class="btn btn-outline-danger" @onclick="ClearCart" disabled="@isUpdating">
                                    カートを空にする
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private GiftPalette.Models.Cart currentCart = new();
    private bool loading = true;
    private bool isUpdating = false;
    private bool showCheckout = false;
    private bool isProcessing = false;
    
    private string customerName = "";
    private string customerEmail = "";
    private string shippingAddress = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task LoadCart()
    {
        loading = true;
        currentCart = await CartService.GetCartAsync();
        loading = false;
    }

    private async Task UpdateQuantity(int productId, int newQuantity)
    {
        if (newQuantity <= 0)
        {
            await RemoveItem(productId);
            return;
        }

        isUpdating = true;
        currentCart = await CartService.UpdateCartItemAsync(productId, newQuantity);
        isUpdating = false;
    }

    private async Task RemoveItem(int productId)
    {
        isUpdating = true;
        currentCart = await CartService.RemoveFromCartAsync(productId);
        isUpdating = false;
    }

    private async Task ClearCart()
    {
        isUpdating = true;
        await CartService.ClearCartAsync();
        currentCart = await CartService.GetCartAsync();
        isUpdating = false;
    }

    private void GoToProducts()
    {
        Navigation.NavigateTo("/products");
    }

    private void StartCheckout()
    {
        showCheckout = true;
    }

    private void CancelCheckout()
    {
        showCheckout = false;
        customerName = "";
        customerEmail = "";
        shippingAddress = "";
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(customerName) &&
               !string.IsNullOrWhiteSpace(customerEmail) &&
               !string.IsNullOrWhiteSpace(shippingAddress);
    }

    private async Task CompleteOrder()
    {
        if (!IsFormValid()) return;

        isProcessing = true;
        try
        {
            var order = await OrderService.CreateOrderAsync(currentCart, customerName, customerEmail, shippingAddress);
            await CartService.ClearCartAsync();
            Navigation.NavigateTo($"/order-confirmation/{order.Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error completing order: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }
}