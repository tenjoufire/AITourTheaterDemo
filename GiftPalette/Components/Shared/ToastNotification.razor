@if (ShowToast)
{
    <div class="toast-notification @(ShowToast ? "show" : "")" @onclick="CloseToast">
        <div class="toast-content">
            <div class="toast-icon">✅</div>
            <div class="toast-text">
                <div class="toast-title">@Title</div>
                <div class="toast-message">@Message</div>
            </div>
            <button class="toast-close" @onclick="CloseToast" @onclick:stopPropagation="true">×</button>
        </div>
    </div>
}

<style>
.toast-notification {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 3000;
    opacity: 0;
    transform: translateX(100%);
    transition: all 0.3s ease-in-out;
    max-width: 400px;
    cursor: pointer;
}

.toast-notification.show {
    opacity: 1;
    transform: translateX(0);
}

.toast-content {
    background: linear-gradient(135deg, #ffffff, #f8f9ff);
    border: 2px solid #ff9ec7;
    border-radius: 12px;
    padding: 16px;
    box-shadow: 0 8px 25px rgba(255, 158, 199, 0.2);
    backdrop-filter: blur(10px);
    display: flex;
    align-items: center;
    gap: 12px;
    position: relative;
}

.toast-icon {
    font-size: 24px;
    flex-shrink: 0;
}

.toast-text {
    flex-grow: 1;
}

.toast-title {
    font-weight: 600;
    color: #ff6b9d;
    margin-bottom: 4px;
    font-size: 14px;
}

.toast-message {
    color: #4a5568;
    font-size: 13px;
    line-height: 1.4;
}

.toast-close {
    background: none;
    border: none;
    font-size: 20px;
    color: #718096;
    cursor: pointer;
    padding: 4px;
    line-height: 1;
    flex-shrink: 0;
    border-radius: 4px;
    transition: background-color 0.2s ease;
}

.toast-close:hover {
    background-color: rgba(255, 158, 199, 0.1);
    color: #ff6b9d;
}
</style>

@code {
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public string Message { get; set; } = string.Empty;
    [Parameter] public bool ShowToast { get; set; }
    [Parameter] public EventCallback<bool> ShowToastChanged { get; set; }

    private async Task CloseToast()
    {
        ShowToast = false;
        await ShowToastChanged.InvokeAsync(ShowToast);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ShowToast)
        {
            // Auto-hide after 5 seconds
            await Task.Delay(5000);
            if (ShowToast)
            {
                await CloseToast();
            }
        }
    }
}